GAP method
O((n+m)log(n+m))

//Initial Template for Java

import java.util.*;
import java.io.*;
import java.io.*;

public class Main
{
    public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
		while(t-->0){
		    String inputLine[] = br.readLine().trim().split(" ");
		    int n = Integer.parseInt(inputLine[0]);
		    int m = Integer.parseInt(inputLine[1]);
		    long arr1[] = new long[n];
		    long arr2[] = new long[m];
		    inputLine = br.readLine().trim().split(" ");
		    for(int i=0; i<n; i++){
		        arr1[i] = Long.parseLong(inputLine[i]);
		    }
		    inputLine = br.readLine().trim().split(" ");
		    for(int i=0; i<m; i++){
		        arr2[i] = Long.parseLong(inputLine[i]);
		    }
		    Solution ob = new Solution();
		    ob.merge(arr1, arr2, n, m);
		    
		    StringBuffer str = new StringBuffer();
		    for(int i=0; i<n; i++){
		        str.append(arr1[i]+" ");
		    }
		    for(int i=0; i<m; i++){
		        str.append(arr2[i]+" ");
		    }
		    System.out.println(str);
		}
	}
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    public static void merge(long arr1[], long arr2[], int n, int m) 
    {
        // code here 
        int gap = m + n,i,j;
    //  we need to declare i and j here because we'll be needing i and j in all 3 for loops.
        
        for(gap = findGap(gap); gap > 0; gap = findGap(gap)) {
           // comparing elements in the first
            // array.
            for(i = 0; i + gap < n; i++) {
                if(arr1[i] > arr1[i+gap]) {
                    long temp = arr1[i];
                    arr1[i] = arr1[i+gap];
                    arr1[i+gap] = temp;
                }
            }
            // comparing elements in both arrays.
            for(j = gap > n ? gap-n:0; j < m && i < n; i++, j++) {
                if(arr1[i] > arr2[j]) {
                    long temp = arr1[i];
                    arr1[i] = arr2[j];
                    arr2[j] = temp;
                }
            }
            
            if(j < m) {
             // comparing elements in the
                // second array.
                for(j = 0; j + gap < m; j++) {
                    if(arr2[j] > arr2[j+gap]) {
                        long temp = arr2[j];
                        arr2[j] = arr2[j+gap];
                        arr2[j+gap] = temp;
                    }
                }
            }
        }
    }
    // Function to find next gap.
    static int findGap(int gap) {
        if(gap <= 1)
            return 0;
        return (gap/2) + (gap%2);
    }
}
